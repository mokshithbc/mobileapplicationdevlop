#9. Develop a Python program to implement HMM and CRF on sequence tagging task.
import numpy as np
from hmmlearn import hmm
from sklearn_crfsuite import CRF
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

X = [['walk', 'in', 'the', 'park'],['eat', 'apple'],['eat', 'apple', 'in', 'the', 'morning']]
y = [['V', 'P', 'D', 'N'],['V', 'N'],['V', 'N', 'P', 'D', 'N']]

X_encoded = [[ord(word[0]) - ord('a') + 1 for word in sentence] for sentence in X]
y_encoded = [[ord(tag) - ord('A') for tag in tags] for tags in y]
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y_encoded, test_size=0.2, random_state=42)
hmm_model = hmm.MultinomialHMM(n_components=3)  # Number of states
X_train_concat = np.concatenate([np.array(seq) for seq in X_train])
lengths = [len(seq) for seq in X_train]
hmm_model.fit(X_train_concat.reshape(-1, 1), lengths)
X_test_concat = np.concatenate([np.array(seq) for seq in X_test])
test_lengths = [len(seq) for seq in X_test]
logprob, hmm_pred = hmm_model.decode(X_test_concat.reshape(-1, 1), lengths=test_lengths)
hmm_pred_labels = [chr(state + ord('A')) for state in hmm_pred]
y_test_flat = [chr(tag + ord('A')) for seq in y_test for tag in seq]

def word2features(sent, i):
    word = sent[i]
    features = {
        'word': str(word),
    }
    if i > 0:
        features['-1:word'] = str(sent[i - 1])
    else:
        features['BOS'] = True  # Beginning of sentence
    if i < len(sent) - 1:
        features['+1:word'] = str(sent[i + 1])
    else:
        features['EOS'] = True  # End of sentence
    return features

def sent2features(sent):
    return [word2features(sent, i) for i in range(len(sent))]

X_train_feats = [sent2features(sent) for sent in X_train]
y_train_labels = [[chr(tag + ord('A')) for tag in tags] for tags in y_train]
X_test_feats = [sent2features(sent) for sent in X_test]
y_test_labels = [[chr(tag + ord('A')) for tag in tags] for tags in y_test]
crf_model = CRF()
crf_model.fit(X_train_feats, y_train_labels)
# 
print("HMM Results:\n",classification_report(y_test_flat, hmm_pred_labels))
print("\nCRF Results:")
crf_pred = crf_model.predict(X_test_feats)
y_test_flat = [item for sublist in y_test_labels for item in sublist]
crf_pred_flat = [item for sublist in crf_pred for item in sublist]
print(classification_report(y_test_flat, crf_pred_flat))
